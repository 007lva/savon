h1. Savon

p. Savon can be installed as a gem from the "gemcutter":http://gemcutter.org repository.
Please follow the steps on their website to set up your rubygems installation.

bc. $ gem install savon

h3. Dependencies

bc. cobravsmongoose = 0.0.2
hpricot 0.8.2 (JRuby-compatible version)

h2. Getting started

p. Instantiate a new instance of Savon::Service, passing in the WSDL of your service.

bc. proxy = Savon::Service.new 'http://example.com/UserService?wsdl'

h3. The WSDL

p. Use the WSDL object to find out about the SOAP actions offered by the service.

bc. proxy.wsdl.soap_actions
=> ["getAllUsers", "getUserById"]

p. Find out more about the [[WSDL]] object.

h3. Calling a SOAP action

p. Now without any setup (assuming your service applies to the default [[Options]]),
you can just call any available SOAP action.

bc. response = proxy.getAllUsers

p. In case your SOAP actions are named in lowerCamelCase or CamelCase you can also
call them using snake_case, which feels much more natural.

bc. response = proxy.get_all_users

h3. Parameters

p. Specifying parameters to be received by the SOAP service, can be done by passing
a Hash to the SOAP action call.

bc. response = proxy.get_user_by_id 'id' => { '$' => "666" }

p. Like to learn more about Parameters? Then take a look at: [[BadgerFish]].

h3. The response

p. The SOAP (XML) response is translated into a Hash following the [[BadgerFish]]
convention. By default (see [[Options]]) translation starts at the '//return' (XPath
expression) node of the XML response.

bc. p proxy.get_user_by_id 'id' => { '$' => "666" }
=> { 'user' => { '@id' => '666', '@username' => 'dude', '$' => 'biography' } }

h3. HTTP errors and SOAP faults

p. Savon raises a Savon::SOAPFault in case of a SOAP fault and a Savon::HTTPError
in case of an HTTP error. More information about [[Errors]].

h3. Logging

p. Savon logs each request and response, but you need to specify the logger and
log level to use.

bc. Savon.logger = Logger.new STDOUT
Savon.log_level = :info

Read more about [[Logging]].
