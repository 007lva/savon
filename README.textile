h3. Savon

Heavy metal Ruby SOAP client library

bc. $ gem install savon

p. Wiki: "http://wiki.github.com/rubiii/savon":http://wiki.github.com/rubiii/savon
RDoc: "http://rdoc.info/projects/rubiii/savon":http://rdoc.info/projects/rubiii/savon

p. *Warning:* you should be familiar with SOAP, WSDL and tools like soapUI.

h3. Instantiate a client

p. Instantiate Savon::Client, passing in the WSDL of your service.

bc. client = Savon::Client.new "http://example.com/UserService?wsdl"

h3. Calling a SOAP action

p. Assuming your service applies to the "Defaults":http://wiki.github.com/rubiii/savon/defaults, you can now call any available SOAP action.

bc. response = client.get_all_users

p. Savon lets you call SOAP actions using snake_case, because even though they will propably be written in lowerCamelCase or CamelCase, it just feels much more natural.

h3. The WSDL object

p. Savon::WSDL represents the WSDL of your service, including information like the namespace URI and available SOAP actions.

bc. client.wsdl.soap_actions.keys
=> [:get_all_users, :get_user_by_id, :user_magic]

p. More information: "WSDL":http://wiki.github.com/rubiii/savon/wsdl object.

h3. The SOAP object

p. Savon::SOAP represents the SOAP request. Pass a block to your SOAP call and the SOAP object is passed to it as the first argument. The object allows setting the SOAP version, header, body and namespaces per request.

bc. response = client.get_user_by_id { |soap| soap.body = { :id => 666 } }

p. More information: "SOAP":http://wiki.github.com/rubiii/savon/soap object.

h3. The WSSE object

p. Savon::WSSE represents WSSE authentication. Pass a block to your SOAP call and the WSSE object is passed to it as the second argument. The object allows setting the WSSE username, password and whether to use digest authentication.

bc. response = client.get_user_by_id do |soap, wsse|
  wsse.username = "gorilla"
  wsse.password = "secret"
  soap.body = { :id => 666 }
end

p. More information: "WSSE":http://wiki.github.com/rubiii/savon/wsse object.

h3. The Response object

p. Savon::Response represents the HTTP and SOAP response. It contains and raises errors in case of an HTTP error or SOAP fault (unless disabled). Also you can get the response as XML (for parsing it with an XML library) or translated into a Hash.
More information: "Response":http://wiki.github.com/rubiii/savon/response object.

h3. HTTP errors and SOAP faults

p. Savon raises a Savon::SOAPFault in case of a SOAP fault and a Savon::HTTPError in case of an HTTP error.
More information: "Errors":http://wiki.github.com/rubiii/savon/errors.

h3. Logging

p. Savon logs each request and response to STDOUT. But there are a couple of options to change the default behaviour.
More information: "Logging":http://wiki.github.com/rubiii/savon/logging.
