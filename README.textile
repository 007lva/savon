h1. Savon

p. Savon can be installed as a gem from the "gemcutter":http://gemcutter.org repository.
Please follow the steps on their website to set up your rubygems installation.

bc. $ gem install savon

h3. Dependencies

bc. cobravsmongoose = 0.0.2
hpricot 0.8.2 (JRuby-compatible version)

h2. Getting started

p. Instantiate a new instance of Savon::Service, passing in the WSDL of your service.

bc. proxy = Savon::Service.new "http://example.com/UserService?wsdl"

h3. The WSDL

p. You can find out about the SOAP actions available on the webservice by using
the WSDL object.

bc. proxy.wsdl.soap_actions
=> [:get_all_users, :get_user_by_id, :user_magic]

p. Find out more about the [[WSDL]] object.

h3. Calling a SOAP action

p. Now, assuming your service applies to the default [[Config]], you can just
call any available SOAP action.

bc. response = proxy.get_all_users

p. Savon lets you call SOAP actions using snake_case, because even though they
will propably be written in lowerCamelCase or CamelCase, it just feels much
more natural.

h3. Parameters

p. Specifying parameters for the SOAP service, can be done by simply passing a
Hash to the SOAP action call.

bc. response = proxy.get_user_by_id :id => { "$" => "666" }

p. Learn more about [[Parameters]], [[Value mapping]] and the [[BadgerFish]] convention.

h3. The response

p. By default, the SOAP response is translated into a Hash. Take a look at the
[[Config]] for more information.

bc. proxy.get_user_by_id :id => { "$" => "666" }
=> { "user" => { "@id" => "666", "@username" => "dude", "$" => "biography" } }

h3. HTTP errors and SOAP faults

p. Savon raises a Savon::SOAPFault in case of a SOAP fault and a Savon::HTTPError
in case of an HTTP error. More information about [[Errors]].

h3. Logging

p. By default Savon logs each request and response to STDOUT. Specifying your
own logger is as easy as it gets:

bc. Savon::HTTP.logger = RAILS_DEFAULT_LOGGER

Read more about [[Logging]].